//方法1：暴力破解，两层循环
class Solution {
  public int[] twoSum(int[] arr, int target) {
    for(int i = 0; i < arr.length; i++) {
      for(int j = i; j < arr.length; j++) {
        if(arr[i] + arr[j] == target) {
          return new int[]{i,j};
        }
      }
    }
    throw new IllegalArgumentException("No exist two Sum");
  }
}
//时间复杂度O（n^2）
//1.测试过程中发现“数组”中没有重写toString()，调用时要注意！
//2.取数据长度为arr.length,是数组的一个属性；字符串取数据长度为str.length(),是字符串的一个方法。
//3.throw问题还不熟悉


//方法2：哈希表存储，以空间换时间(最优)
class Solution {
  public int[] twoSum(int[] arr, int target) {
    Map<Integer,Integer> map = new HashMap<>();
    for(int i = 0; i < arr.length; i++) {
      if(map.containsKey(target - arr[i])) {
        return new int[]{i,map.get(target - arr[i])};
      }
    }
    throw new IllegalArgumentException("No exist two Sum");
  }
}

////时间复杂度O（n）
