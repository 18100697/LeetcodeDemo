
class Solution {
    public int reverse(int x) {
        long result = 0;
        int j = 0;
        while(x / 10 != 0) {
            j = x % 10;
            result = result * 10 + j;
            x = x / 10;
        }
        result = result * 10 + x;
        if(result < - Math.pow(2,31) | result > Math.pow(2,31) - 1) {
            result = 0;
        }
        System.out.println(result);
        int a = (int)result;
        return a;
    }
}

//1.取整运算/符号会带入计算，取余运算左边数会带入符号，右边不带入
//2.int取值范围【-2^31,2^31-1】
//3.Max.pow(a,b) a的b次方


//优化代码，先判断是否溢出，溢出置为0，节省运算时间
class Solution {
  public int reverse(int x) {
    int result = 0;
    while(x != 0) {
      int j = x % 10;
      
      if(result > Integer.MAX_VALUE / 10 || (result == Integer.MAX_VALUE / 10 && j > 7)) return 0;
      if(result < Integer.MIN_VALUE / 10 || (result == Integer.MIN_VALUE / 10 && j <-8)) return 0;
      result = result * 10 + j;
      x = x / 10;
    }
    return result;
    
  }
}

 //4.Interger.MAX_VALUE % 10 = 7; Integer.MIN_VALUE & 10 = 8
