//1.判断String s是否为空    应用if("".equals(s) || s == null) 
                          s.empty底层为s.length() == 0 ? true : false, s为null时会报NullPointerException
            
//2.stack 栈为空时，peek()和pop都会EmptyStackException，peek不会删除栈顶元素，只取
//3.stack stack默认为[]
//4.stack stack为[]时stack.empty() = true


方法1：
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        if(s.isEmpty()) {
            return true;
        }
        for(int i = 0; i < s.length(); i++) {
            if(s.charAt(i) == '(' || s.charAt(i) == '[' || s.charAt(i) == '{') {
                stack.push(s.charAt(i));
                continue;
            }
            if(s.charAt(i) == ')') {
                if(stack.empty()) {
                    return false;
                }
                if(stack.peek() == '(') {
                    stack.pop();
                    continue;
                }else {
                    return false;
                }
            }

            if(s.charAt(i) == ']') {
                if(stack.empty()) {
                    return false;
                }
                if(stack.peek() == '[') {
                    stack.pop();
                    continue;
                }else {
                    return false;
                }
            }

            if(s.charAt(i) == '}') {
                if(stack.empty()) {
                    return false;
                }
                if(stack.peek() == '{') {
                    stack.pop();
                    continue;
                }else {
                    return false;
                }
            }
        }

        if(stack.empty()) {
            return true;
        }else {
            return false;
        }
    }
}


方法2：

        if (s == null || s.length() == 0) {
            return true;
        }
        if (s.length() % 2 == 1) {
            return false;
        }
        Map<Character, Character> map = new HashMap();
        map.put(')', '(');
        map.put('}', '{');
        map.put(']', '[');
        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(' || s.charAt(i) == '{' || s.charAt(i) == '[') {
                stack.push(s.charAt(i));
            } else {
                if (!stack.empty() && stack.peek() != null && map.get(s.charAt(i)).equals(stack.peek())) {
                    stack.pop();
                } else {
                    return false;
                }
            }
        }
        return stack.empty();
